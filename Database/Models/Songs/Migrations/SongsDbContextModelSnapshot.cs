// <auto-generated />
using System;
using Database.Models.Songs;
using EKS_database_web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EKS_database_web.Data.Songs.Migrations
{
    [DbContext(typeof(SongsDbContext))]
    partial class SongsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("Web.Data.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("TEXT");

                    b.Property<long>("LastModified")
                        .HasColumnName("lastModified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Web.Data.Playlist", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("TEXT");

                    b.Property<long>("LastModified")
                        .HasColumnName("lastModified")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("playlists");
                });

            modelBuilder.Entity("Web.Data.Song", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .HasColumnName("author")
                        .HasColumnType("TEXT");

                    b.Property<long>("LastModified")
                        .HasColumnName("lastModified")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Number")
                        .HasColumnName("number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("songs");
                });

            modelBuilder.Entity("Web.Data.SongCategory", b =>
                {
                    b.Property<long>("SongId")
                        .HasColumnName("song")
                        .HasColumnType("INTEGER");

                    b.Property<long>("CategoryId")
                        .HasColumnName("category")
                        .HasColumnType("INTEGER");

                    b.HasKey("SongId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("song_category");
                });

            modelBuilder.Entity("Web.Data.SongPlaylist", b =>
                {
                    b.Property<long>("SongId")
                        .HasColumnName("song")
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlaylistId")
                        .HasColumnName("playlist")
                        .HasColumnType("INTEGER");

                    b.HasKey("SongId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("song_playlist");
                });

            modelBuilder.Entity("Web.Data.Verse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SongId")
                        .HasColumnName("songId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnName("text")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SongId");

                    b.ToTable("verses");
                });

            modelBuilder.Entity("Web.Data.SongCategory", b =>
                {
                    b.HasOne("Web.Data.Category", "Category")
                        .WithMany("SongCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired();

                    b.HasOne("Web.Data.Song", "Song")
                        .WithMany("SongCategories")
                        .HasForeignKey("SongId")
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Data.SongPlaylist", b =>
                {
                    b.HasOne("Web.Data.Playlist", "Playlist")
                        .WithMany("SongPlaylists")
                        .HasForeignKey("PlaylistId")
                        .IsRequired();

                    b.HasOne("Web.Data.Song", "Song")
                        .WithMany("SongPlaylists")
                        .HasForeignKey("SongId")
                        .IsRequired();
                });

            modelBuilder.Entity("Web.Data.Verse", b =>
                {
                    b.HasOne("Web.Data.Song", "Song")
                        .WithMany("Verses")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
